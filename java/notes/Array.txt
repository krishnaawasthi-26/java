In Java, an **array** is a container object that holds a fixed number of values of a single data type. Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.

### Key Points About Arrays:
1. **Fixed Size**: Once an array is created, its size is fixed. You cannot change the size of the array after it's initialized.
2. **Zero-based Indexing**: Array indices in Java start at 0, meaning the first element of the array is accessed using index `0`, the second element using index `1`, and so on.
3. **Homogeneous Data**: All elements in an array must be of the same data type (e.g., all `int`, all `String`, etc.).

### Declaring and Initializing Arrays in Java

#### 1. **Declaration**: 
First, you declare an array. Here's how to declare an array of `int`:

```java
int[] numbers;  // Declare an array of integers
```

#### 2. **Creating and Initializing**:
You can create and initialize an array in the following ways:

- **Static Initialization** (when you know the values beforehand):

```java
int[] numbers = {1, 2, 3, 4, 5};  // Initialize with values
```

- **Dynamic Initialization** (when the size is known, but values are assigned later):

```java
int[] numbers = new int[5];  // Array of size 5, default values are 0
```

You can also initialize arrays with specific values:

```java
String[] fruits = new String[3];  // Array of size 3 for Strings
fruits[0] = "Apple";  // Assign values to each element
fruits[1] = "Banana";
fruits[2] = "Cherry";
```

#### 3. **Accessing Array Elements**:
You can access elements using the index number:

```java
int firstElement = numbers[0];  // Access the first element (index 0)
System.out.println(firstElement);  // Output: 1
```

#### 4. **Array Length**:
You can get the length (number of elements) of the array using the `length` property:

int length = numbers.length;  // Gets the length of the array
System.out.println("Length of the array: " + length);  // Output: 5

#### 5. **Looping through an Array**:
You can use loops to iterate through the array:

- **Using `for` loop**:

```java
for (int i = 0; i < numbers.length; i++) {
    System.out.println(numbers[i]);  // Prints each element
}
```

- **Using `for-each` loop** (simpler):

```java
for (int number : numbers) {
    System.out.println(number);  // Prints each element
}
```

### Example: Full Array Example

```java
public class ArrayExample {
    public static void main(String[] args) {
        // Static Initialization
        int[] numbers = {10, 20, 30, 40, 50};
        
        // Accessing and printing the first element
        System.out.println("First Element: " + numbers[0]);  // Output: 10
        
        // Printing array length
        System.out.println("Length of array: " + numbers.length);  // Output: 5
        
        // Iterating through the array using a for loop
        System.out.println("Array elements:");
        for (int i = 0; i < numbers.length; i++) {
            System.out.println(numbers[i]);
        }
        
        // Using for-each loop
        System.out.println("Using for-each loop:");
        for (int num : numbers) {
            System.out.println(num);
        }
    }
}

Summary:
- Arrays store a fixed-size sequence of elements of the same type.
- You declare arrays using `datatype[] arrayName;`, and initialize them either statically or dynamically.
- You can access elements with zero-based indices and use loops to iterate through them.
